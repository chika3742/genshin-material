name: Deploy to App Store / Google Play

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

env:
  VERSION_NUMBER_OFFSET: 8
  NODE_VERSION: 20
  JAVA_VERSION: 17
  RUBY_VERSION: 3.3

jobs:
  parse-version-info:
    name: Parse version info
    runs-on: ubuntu-latest
    outputs:
      filename: ${{ steps.parse.outputs.filename }}
      version: ${{ steps.parse.outputs.version }}
      native_update_required: ${{ steps.parse.outputs.native_update_required }}
      previous_filename: ${{ steps.parse.outputs.previous_filename }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup yq
        run: wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O ./yq && chmod +x ./yq

      - name: Parse version info
        id: parse
        run: |
          rn_path=./nuxt/assets/data/release-notes.yaml
          
          version_text="v$(./yq '.[0].funcVersion' -r $rn_path)_D$(./yq '.[0].dataVersion' -r $rn_path)"
          filename="genshin-material_$version_text.zip"
          echo "filename=$filename" >> "$GITHUB_OUTPUT"
          echo "version=$version_text" >> "$GITHUB_OUTPUT"
          echo "native_update_required=$(./yq '.[0].nativeUpdateRequired' -r $rn_path)" >> "$GITHUB_OUTPUT"
          
          if [ "$(yq -r '.[2]' $rn_path)" != "null" ]; then
            prev_version_text="v$(./yq '.[2].funcVersion' -r $rn_path)_D$(./yq '.[2].dataVersion' -r $rn_path)"
            previous_filename="genshin-material_$prev_version_text.zip"
            echo "previous_filename=$previous_filename" >> "$GITHUB_OUTPUT"
          fi

  deploy-hot-update:
    name: Deploy to R2 for hot update
    runs-on: ubuntu-latest
    needs:
      - parse-version-info
    if: needs.parse-version-info.outputs.native_update_required != 'true'
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: yarn
          cache-dependency-path: nuxt/yarn.lock

      - run: yarn install
        working-directory: nuxt
        env:
          GH_PACKAGES_TOKEN: ${{ secrets.GH_PACKAGES_TOKEN }}

      - name: Bundle into zip file
        working-directory: nuxt
        run: yarn bundle ${{ needs.parse-version-info.outputs.version }}

      - name: Deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          workingDirectory: nuxt
          command: r2 object put app-updates/genshin-material/${{ needs.parse-version-info.outputs.filename }} --file=./${{ needs.parse-version-info.outputs.filename }}

      - name: Delete obsolete file
        if: needs.parse-version-info.outputs.previous_filename != null
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          workingDirectory: nuxt
          command: r2 object delete app-updates/genshin-material/${{needs.parse-version-info.outputs.previous_filename}}

  deploy-android:
    name: Deploy to Google Play
    runs-on: ubuntu-latest
    #    permissions:
    #      contents: read
    #      id-token: write
    env:
      BUNDLE_GEMFILE: ${{ github.workspace }}/nuxt/android/Gemfile
    #      WORKLOAD_IDENTITY_PROVIDER: projects/218237880785/locations/global/workloadIdentityPools/github-actions/providers/github
    #      SERVICE_ACCOUNT: fastlane-integration@mydatauploader.iam.gserviceaccount.com
    #      WORKLOAD_IDENTITY_AUDIENCE: https://github.com/chika3742
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4 # for android build
        with:
          distribution: zulu
          java-version: ${{ env.JAVA_VERSION }}

      - uses: ruby/setup-ruby@v1 # for fastlane
        with:
          ruby-version: ${{ env.RUBY_VERSION }}

      - run: bundle install

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: yarn
          cache-dependency-path: nuxt/yarn.lock

      - run: yarn install
        working-directory: nuxt
        env:
          GH_PACKAGES_TOKEN: ${{ secrets.GH_PACKAGES_TOKEN }}

      - name: Extract local.properties
        run: base64 -d <<< "${{ secrets.ANDROID_LOCAL_PROPERTIES_BASE64 }}" >> nuxt/android/local.properties

      - name: Extract keystore
        run: base64 -d <<< "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" > nuxt/android/gm.keystore

      - name: Extract service account key
        run: base64 -d <<< "${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY_BASE64 }}" > nuxt/android/service_account_key.json

      #      - name: Authenticate to Google Cloud
      #        id: auth
      #        uses: google-github-actions/auth@v2
      #        with:
      #          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
      #          service_account: ${{ env.SERVICE_ACCOUNT }}
      #          audience: ${{ env.WORKLOAD_IDENTITY_AUDIENCE }}

      - name: Version number with offset
        id: version-number
        run: echo "result=$((${{ env.VERSION_NUMBER_OFFSET }} + ${{ github.run_number }}))" >> "$GITHUB_OUTPUT"

      - run: yarn deploy:android
        working-directory: nuxt
        env:
          APP_VERSION_NUMBER: ${{ steps.version-number.outputs.result }}
          CREDENTIALS_FILE_PATH: ./service_account_key.json

  deploy-ios:
    name: Deploy to App Store
    runs-on: macos-13
    env:
      BUNDLE_GEMFILE: ${{ github.workspace }}/nuxt/ios/App/Gemfile
      DEVELOPER_DIR: /Applications/Xcode_15.2.app/Contents/Developer
    steps:
      - uses: actions/checkout@v4

      - uses: ruby/setup-ruby@v1 # for fastlane
        with:
          ruby-version: ${{ env.RUBY_VERSION }}

      - run: bundle install

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: yarn
          cache-dependency-path: nuxt/yarn.lock

      - run: yarn install
        working-directory: nuxt
        env:
          GH_PACKAGES_TOKEN: ${{ secrets.GH_PACKAGES_TOKEN }}

      - name: Extract App Store Connect API auth key
        run: |
          mkdir -p ~/private_keys
          base64 -d <<< "${{ secrets.APP_STORE_CONNECT_AUTH_KEY_BASE64 }}" > ~/private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_KEY_ID }}.p8

      - name: Import mobile provisioning profile
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          base64 -d <<< "${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}" > ~/Library/MobileDevice/Provisioning\ Profiles/gm.mobileprovision

      - name: Import code-signing certificates
        uses: Apple-Actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.APPLE_CERTIFICATES_P12_BASE64 }}
          p12-password: ${{ secrets.APPLE_CERTIFICATES_PASSWORD }}

      - name: Version number with offset
        id: version-number
        run: echo "result=$((${{ env.VERSION_NUMBER_OFFSET }} + ${{ github.run_number }}))" >> "$GITHUB_OUTPUT"

      - run: yarn deploy:ios
        working-directory: nuxt
        env:
          APP_VERSION_NUMBER: ${{ steps.version-number.outputs.result }}
          APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
